id,type,front,back,known
1013,1,"What's an Algorithm ?","Algorithms are a series of steps or rules for solving a computational problem.",0
1014,1,"What's a Computational Problem ?","Collection of questions that computers might be able to solve.",0
1015,1,"What's Algorithm Efficiency","The Study of the Amount of resources used by an Algorithm.",0
1016,1,"What's an Efficient Algorithm","An algorithm using less resources",0
1017,1,"Time Efficiency","A Measure of Amount of Time an Algorithm takes to Solve a Problem.",0
1018,1,"Space Efficiency","A Measure of the Amount of Memory an Algorithm Needs to Solve a Problem",0
1019,1,"Complex Theory","A Study of Algorithm Performance based on Cost Functions of Statement Counts.",0
1020,1,"Time Complexity","Time Complexity Deals with Finding out How the Computational ""Time"" of an Algorithm Change in ""Size of the input"".",0
1021,1,"Space Complexity","Space Complexity Deals with Finding Out How Much ""Extra Space"" Would be Required by the Algorithm with Change in the Input Size.",0
1058,1,"How to Determine Complexities","We can Determine complexity based on the type of statements used by a program.",0
1059,1,"How to describe a runtime for an Algorithm?","To describe a runtime for an Algorithm we've three descriptions (Best cases, Worst case and Average Case)",0
1060,1,"Is Time the only thing that matters in an Algorithm?","No,
We might also care about the amount of memory or space required by an Algorithm",0
1061,1,"Describe the Time aspect of an Algorithmic performance","- Instruction take time.
- How fast does the Algorithm perform?
- What affects its runtime",0
1062,1,"What would be a ""naive approach"" to analyse an algorithms?","Implement these algorithms in a programming language (ex: C++), and run them to compare their time requirements, in this case we're comparing the programs (instead of algorithms).",0
1063,1,"What's the best approach to analyse an algorithm, mathematical techniques, or implement theses algorithms in a programming language?","When we analyse algorithms, we should employ mathematical techniques that analyse algorithms independently of specific implementations, computers, or data.",0
1064,1,"The running time of loops","The running time of the statements inside of that loop * the number of iterations",0
1065,1,"The running time of nested loops","The running time of statement * the product of the size of all loops",0
1066,1,"The running time of If/Else","the running time of the test + the larger of running times of S1 and S2",0
1067,1,"How we can compare the efficiency of two algorithms?","Comparing their growth rates",0
1068,1,"c Growth Rate Name",Constant,0
1069,1,"log n Growth Rate Name",Logarithmic,0
1070,1,"Log^2 Growth Rate Name",Log-squared,0
1071,1,"n Growth Rate Name",Linear,0
1072,1,"n log n Growth Rate Name","n log n",0
1073,1,"n^2 Growth Rate Name",Quadratic,0
1074,1,"n^3 Growth Rate Name",Cubic,0
1075,1,"2^n Growth Rate Name",Exponential,0
1076,1,"Describe the Space aspect of an Algorithmic performance","- Data structures take space
- What kind of data structures can be used?
- How does choice of a data structure affect the runtime?",0
1077,1,"O(1) Time Requirement","Time requirement is constant, and it's independent of the problem's size.",0
1078,1,"O(log n) Time Requirement","Time requirement is logarithmic, increases slowly as the problem size increases.",0
1079,1,"O(n) Time Requirement","Time requirement is linear, increases directly with size the problem.",0
1080,1,"O(n log n) Time Requirement","Time requirement increases more rapidly than a linear algorithm.",0
1081,1,"O(n^2) Time Requirement","Time requirement is quadratic, increases rapidly with the size of the problem.",0
1082,1,"O(n^3) Time Requirement","Time requirement is cubic, increases more rapidly with the size of the problem than the time requirement for a quadratic algorithm.",0
1083,1,"O(2^n) Time Requirement","Time requirement is exponential, As the size of the problem increases, the time requirement increases too rapidly.",0
1084,1,"If an algorithm takes 1 second to run with the problem size 8, what is the time requirement (approximately) for that algorithm with the problem size 16?","O (1) => T(n) = 1 second",0
